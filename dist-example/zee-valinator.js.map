{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Characters.js","webpack:///./src/example/validation-rules.js","webpack:///./src/example/script.js","webpack:///./src/Core.js","webpack:///./src/DefaultChecks.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","validation_rules","element","rules","required","matchWith","zeeValinator","self","this","characters","removeAccents","string","characterMap","base","letters","length","replace","defaultChecks","alphanumeric","option","match","email","hexColor","parseInt","$","val","maxLength","maxNumber","isNaN","parseFloat","minLength","minNumber","personName","numeric","phone","inputErrorClass","errorMessageTag","errorMessageClass","errorMessageSelector","$errorMessageElement","addClass","checks","customSetError","customRemoveError","clearErrorOnChange","setClearErrorOnChange","clear","setInputErrorClass","cssClass","setErrorMessageTag","htmlTag","setErrorMessageClass","setCustomErrorHandlers","addCallback","removeCallback","newCheck","callback","type","extend","ensureJquery","removeError","$element","removeClass","next","remove","setError","message","clone","insertAfter","html","off","on","event","validate","definitions","errorElements","each","definitionIndex","definition","elementIndex","prop","trim","nullable","ruleName","messageParts","split","push","setChecks","preventDefault"],"mappings":"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","file":"zee-valinator.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function()\n{\n    const self = this;\n\n    /**\n     * 'Flatten' characters, by removing diacritics\n     * From:\n     * http://web.archive.org/web/20121231230126/http://lehelk.com:80/2011/05/06/script-to-remove-diacritics/\n     * Improved by:\n     * http://stackoverflow.com/a/18884988/1909468\n     * @param  String string\n     * @return String\n     */\n    self.removeAccents = string => {\n        const characterMap = [\n            {\n                base: \"A\",\n                letters: /(&#65;|&#9398;|&#65313;|&#192;|&#193;|&#194;|&#7846;|&#7844;|&#7850;|&#7848;|&#195;|&#256;|&#258;|&#7856;|&#7854;|&#7860;|&#7858;|&#550;|&#480;|&#196;|&#478;|&#7842;|&#197;|&#506;|&#461;|&#512;|&#514;|&#7840;|&#7852;|&#7862;|&#7680;|&#260;|&#570;|&#11375;|[\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F])/g\n            },\n            {\n                base: \"AA\",\n                letters: /(&#42802;|[\\uA732])/g\n            },\n            {\n                base: \"AE\",\n                letters: /(&#198;|&#508;|&#482;|[\\u00C6\\u01FC\\u01E2])/g\n            },\n            {\n                base: \"AO\",\n                letters: /(&#42804;|[\\uA734])/g\n            },\n            {\n                base: \"AU\",\n                letters: /(&#42806;|[\\uA736])/g\n            },\n            {\n                base: \"AV\",\n                letters: /(&#42808;|&#42810;|[\\uA738\\uA73A])/g\n            },\n            {\n                base: \"AY\",\n                letters: /(&#42812;|[\\uA73C])/g\n            },\n            {\n                base: \"B\",\n                letters: /(&#66;|&#9399;|&#65314;|&#7682;|&#7684;|&#7686;|&#579;|&#386;|&#385;|[\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181])/g\n            },\n            {\n                base: \"C\",\n                letters: /(&#67;|&#9400;|&#65315;|&#262;|&#264;|&#266;|&#268;|&#199;|&#7688;|&#391;|&#571;|&#42814;|[\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E])/g\n            },\n            {\n                base: \"D\",\n                letters: /(&#68;|&#9401;|&#65316;|&#7690;|&#270;|&#7692;|&#7696;|&#7698;|&#7694;|&#272;|&#395;|&#394;|&#393;|&#42873;|&#208;|[\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779\\u00D0])/g\n            },\n            {\n                base: \"DZ\",\n                letters: /(&#497;|&#452;|[\\u01F1\\u01C4])/g\n            },\n            {\n                base: \"Dz\",\n                letters: /(&#498;|&#453;|[\\u01F2\\u01C5])/g\n            },\n            {\n                base: \"E\",\n                letters: /(&#69;|&#9402;|&#65317;|&#200;|&#201;|&#202;|&#7872;|&#7870;|&#7876;|&#7874;|&#7868;|&#274;|&#7700;|&#7702;|&#276;|&#278;|&#203;|&#7866;|&#282;|&#516;|&#518;|&#7864;|&#7878;|&#552;|&#7708;|&#280;|&#7704;|&#7706;|&#400;|&#398;|[\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E])/g\n            },\n            {\n                base: \"F\",\n                letters: /(&#70;|&#9403;|&#65318;|&#7710;|&#401;|&#42875;|[\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B])/g\n            },\n            {\n                base: \"G\",\n                letters: /(&#71;|&#9404;|&#65319;|&#500;|&#284;|&#7712;|&#286;|&#288;|&#486;|&#290;|&#484;|&#403;|&#42912;|&#42877;|&#42878;|[\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E])/g\n            },\n            {\n                base: \"H\",\n                letters: /(&#72;|&#9405;|&#65320;|&#292;|&#7714;|&#7718;|&#542;|&#7716;|&#7720;|&#7722;|&#294;|&#11367;|&#11381;|&#42893;|[\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D])/g\n            },\n            {\n                base: \"I\",\n                letters: /(&#73;|&#9406;|&#65321;|&#204;|&#205;|&#206;|&#296;|&#298;|&#300;|&#304;|&#207;|&#7726;|&#7880;|&#463;|&#520;|&#522;|&#7882;|&#302;|&#7724;|&#407;|[\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197])/g\n            },\n            {\n                base: \"J\",\n                letters: /(&#74;|&#9407;|&#65322;|&#308;|&#584;|[\\u004A\\u24BF\\uFF2A\\u0134\\u0248])/g\n            },\n            {\n                base: \"K\",\n                letters: /(&#75;|&#9408;|&#65323;|&#7728;|&#488;|&#7730;|&#310;|&#7732;|&#408;|&#11369;|&#42816;|&#42818;|&#42820;|&#42914;|[\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2])/g\n            },\n            {\n                base: \"L\",\n                letters: /(&#76;|&#9409;|&#65324;|&#319;|&#313;|&#317;|&#7734;|&#7736;|&#315;|&#7740;|&#7738;|&#321;|&#573;|&#11362;|&#11360;|&#42824;|&#42822;|&#42880;|[\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780])/g\n            },\n            {\n                base: \"LJ\",\n                letters: /(&#455;|[\\u01C7])/g\n            },\n            {\n                base: \"Lj\",\n                letters: /(&#456;|[\\u01C8])/g\n            },\n            {\n                base: \"M\",\n                letters: /(&#77;|&#9410;|&#65325;|&#7742;|&#7744;|&#7746;|&#11374;|&#412;|[\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C])/g\n            },\n            {\n                base: \"N\",\n                letters: /(&#78;|&#9411;|&#65326;|&#504;|&#323;|&#209;|&#7748;|&#327;|&#7750;|&#325;|&#7754;|&#7752;|&#544;|&#413;|&#42896;|&#42916;|&#330;|[\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4\\u014A])/g\n            },\n            {\n                base: \"NJ\",\n                letters: /(&#458;|[\\u01CA])/g\n            },\n            {\n                base: \"Nj\",\n                letters: /(&#459;|[\\u01CB])/g\n            },\n            {\n                base: \"O\",\n                letters: /(&#79;|&#9412;|&#65327;|&#210;|&#211;|&#212;|&#7890;|&#7888;|&#7894;|&#7892;|&#213;|&#7756;|&#556;|&#7758;|&#332;|&#7760;|&#7762;|&#334;|&#558;|&#560;|&#214;|&#554;|&#7886;|&#336;|&#465;|&#524;|&#526;|&#416;|&#7900;|&#7898;|&#7904;|&#7902;|&#7906;|&#7884;|&#7896;|&#490;|&#492;|&#216;|&#510;|&#390;|&#415;|&#42826;|&#42828;|[\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C])/g\n            },\n            {\n                base: \"OE\",\n                letters: /(&#338;|[\\u0152])/g\n            },\n            {\n                base: \"OI\",\n                letters: /(&#418;|[\\u01A2])/g\n            },\n            {\n                base: \"OO\",\n                letters: /(&#42830;|[\\uA74E])/g\n            },\n            {\n                base: \"OU\",\n                letters: /(&#546;|[\\u0222])/g\n            },\n            {\n                base: \"P\",\n                letters: /(&#80;|&#9413;|&#65328;|&#7764;|&#7766;|&#420;|&#11363;|&#42832;|&#42834;|&#42836;|[\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754])/g\n            },\n            {\n                base: \"Q\",\n                letters: /(&#81;|&#9414;|&#65329;|&#42838;|&#42840;|&#586;|[\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A])/g\n            },\n            {\n                base: \"R\",\n                letters: /(&#82;|&#9415;|&#65330;|&#340;|&#7768;|&#344;|&#528;|&#530;|&#7770;|&#7772;|&#342;|&#7774;|&#588;|&#11364;|&#42842;|&#42918;|&#42882;|[\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782])/g\n            },\n            {\n                base: \"S\",\n                letters: /(&#83;|&#9416;|&#65331;|&#7838;|&#346;|&#7780;|&#348;|&#7776;|&#352;|&#7782;|&#7778;|&#7784;|&#536;|&#350;|&#11390;|&#42920;|&#42884;|[\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784])/g\n            },\n            {\n                base: \"T\",\n                letters: /(&#84;|&#9417;|&#65332;|&#7786;|&#356;|&#7788;|&#538;|&#354;|&#7792;|&#7790;|&#358;|&#428;|&#430;|&#574;|&#42886;|[\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786])/g\n            },\n            {\n                base: \"TH\",\n                letters: /(&#222;|[\\u00DE])/g\n            },\n            {\n                base: \"TZ\",\n                letters: /(&#42792;|[\\uA728])/g\n            },\n            {\n                base: \"U\",\n                letters: /(&#85;|&#9418;|&#65333;|&#217;|&#218;|&#219;|&#360;|&#7800;|&#362;|&#7802;|&#364;|&#220;|&#475;|&#471;|&#469;|&#473;|&#7910;|&#366;|&#368;|&#467;|&#532;|&#534;|&#431;|&#7914;|&#7912;|&#7918;|&#7916;|&#7920;|&#7908;|&#7794;|&#370;|&#7798;|&#7796;|&#580;|[\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244])/g\n            },\n            {\n                base: \"V\",\n                letters: /(&#86;|&#9419;|&#65334;|&#7804;|&#7806;|&#434;|&#42846;|&#581;|[\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245])/g\n            },\n            {\n                base: \"VY\",\n                letters: /(&#42848;|[\\uA760])/g\n            },\n            {\n                base: \"W\",\n                letters: /(&#87;|&#9420;|&#65335;|&#7808;|&#7810;|&#372;|&#7814;|&#7812;|&#7816;|&#11378;|[\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72])/g\n            },\n            {\n                base: \"X\",\n                letters: /(&#88;|&#9421;|&#65336;|&#7818;|&#7820;|[\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C])/g\n            },\n            {\n                base: \"Y\",\n                letters: /(&#89;|&#9422;|&#65337;|&#7922;|&#221;|&#374;|&#7928;|&#562;|&#7822;|&#376;|&#7926;|&#7924;|&#435;|&#590;|&#7934;|[\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE])/g\n            },\n            {\n                base: \"Z\",\n                letters: /(&#90;|&#9423;|&#65338;|&#377;|&#7824;|&#379;|&#381;|&#7826;|&#7828;|&#437;|&#548;|&#11391;|&#11371;|&#42850;|[\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762])/g\n            },\n            {\n                base: \"a\",\n                letters: /(&#97;|&#9424;|&#65345;|&#7834;|&#224;|&#225;|&#226;|&#7847;|&#7845;|&#7851;|&#7849;|&#227;|&#257;|&#259;|&#7857;|&#7855;|&#7861;|&#7859;|&#551;|&#481;|&#228;|&#479;|&#7843;|&#229;|&#507;|&#462;|&#513;|&#515;|&#7841;|&#7853;|&#7863;|&#7681;|&#261;|&#11365;|&#592;|[\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250])/g\n            },\n            {\n                base: \"aa\",\n                letters: /(&#42803;|[\\uA733])/g\n            },\n            {\n                base: \"ae\",\n                letters: /(&#230;|&#509;|&#483;|[\\u00E6\\u01FD\\u01E3])/g\n            },\n            {\n                base: \"ao\",\n                letters: /(&#42805;|[\\uA735])/g\n            },\n            {\n                base: \"au\",\n                letters: /(&#42807;|[\\uA737])/g\n            },\n            {\n                base: \"av\",\n                letters: /(&#42809;|&#42811;|[\\uA739\\uA73B])/g\n            },\n            {\n                base: \"ay\",\n                letters: /(&#42813;|[\\uA73D])/g\n            },\n            {\n                base: \"b\",\n                letters: /(&#98;|&#9425;|&#65346;|&#7683;|&#7685;|&#7687;|&#384;|&#387;|&#595;|[\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253])/g\n            },\n            {\n                base: \"c\",\n                letters: /(&#99;|&#9426;|&#65347;|&#263;|&#265;|&#267;|&#269;|&#231;|&#7689;|&#392;|&#572;|&#42815;|&#8580;|[\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184])/g\n            },\n            {\n                base: \"d\",\n                letters: /(&#100;|&#9427;|&#65348;|&#7691;|&#271;|&#7693;|&#7697;|&#7699;|&#7695;|&#273;|&#396;|&#598;|&#599;|&#42874;|&#240;|[\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A\\u00F0])/g\n            },\n            {\n                base: \"dz\",\n                letters: /(&#499;|&#454;|[\\u01F3\\u01C6])/g\n            },\n            {\n                base: \"e\",\n                letters: /(&#101;|&#9428;|&#65349;|&#232;|&#233;|&#234;|&#7873;|&#7871;|&#7877;|&#7875;|&#7869;|&#275;|&#7701;|&#7703;|&#277;|&#279;|&#235;|&#7867;|&#283;|&#517;|&#519;|&#7865;|&#7879;|&#553;|&#7709;|&#281;|&#7705;|&#7707;|&#583;|&#603;|&#477;|[\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD])/g\n            },\n            {\n                base: \"f\",\n                letters: /(&#102;|&#9429;|&#65350;|&#7711;|&#402;|&#42876;|[\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C])/g\n            },\n            {\n                base: \"g\",\n                letters: /(&#103;|&#9430;|&#65351;|&#501;|&#285;|&#7713;|&#287;|&#289;|&#487;|&#291;|&#485;|&#608;|&#42913;|&#7545;|&#42879;|[\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F])/g\n            },\n            {\n                base: \"h\",\n                letters: /(&#104;|&#9431;|&#65352;|&#293;|&#7715;|&#7719;|&#543;|&#7717;|&#7721;|&#7723;|&#7830;|&#295;|&#11368;|&#11382;|&#613;|[\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265])/g\n            },\n            {\n                base: \"hv\",\n                letters: /(&#405;|[\\u0195])/g\n            },\n            {\n                base: \"i\",\n                letters: /(&#105;|&#9432;|&#65353;|&#236;|&#237;|&#238;|&#297;|&#299;|&#301;|&#239;|&#7727;|&#7881;|&#464;|&#521;|&#523;|&#7883;|&#303;|&#7725;|&#616;|&#305;|[\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131])/g\n            },\n            {\n                base: \"ij\",\n                letters: /(&#307;|[\\u0133])/g\n            },\n            {\n                base: \"j\",\n                letters: /(&#106;|&#9433;|&#65354;|&#309;|&#496;|&#585;|[\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249])/g\n            },\n            {\n                base: \"k\",\n                letters: /(&#107;|&#9434;|&#65355;|&#7729;|&#489;|&#7731;|&#311;|&#7733;|&#409;|&#11370;|&#42817;|&#42819;|&#42821;|&#42915;|[\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3])/g\n            },\n            {\n                base: \"l\",\n                letters: /(&#108;|&#9435;|&#65356;|&#320;|&#314;|&#318;|&#7735;|&#7737;|&#316;|&#7741;|&#7739;|&#322;|&#410;|&#619;|&#11361;|&#42825;|&#42881;|&#42823;|[\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747])/g\n            },\n            {\n                base: \"lj\",\n                letters: /(&#457;|[\\u01C9])/g\n            },\n            {\n                base: \"m\",\n                letters: /(&#109;|&#9436;|&#65357;|&#7743;|&#7745;|&#7747;|&#625;|&#623;|[\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F])/g\n            },\n            {\n                base: \"n\",\n                letters: /(&#110;|&#9437;|&#65358;|&#505;|&#324;|&#241;|&#7749;|&#328;|&#7751;|&#326;|&#7755;|&#7753;|&#414;|&#626;|&#329;|&#42897;|&#42917;|&#331;|[\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u014B])/g\n            },\n            {\n                base: \"nj\",\n                letters: /(&#460;|[\\u01CC])/g\n            },\n            {\n                base: \"o\",\n                letters: /(&#111;|&#9438;|&#65359;|&#242;|&#243;|&#244;|&#7891;|&#7889;|&#7895;|&#7893;|&#245;|&#7757;|&#557;|&#7759;|&#333;|&#7761;|&#7763;|&#335;|&#559;|&#561;|&#246;|&#555;|&#7887;|&#337;|&#466;|&#525;|&#527;|&#417;|&#7901;|&#7899;|&#7905;|&#7903;|&#7907;|&#7885;|&#7897;|&#491;|&#493;|&#248;|&#511;|&#596;|&#42827;|&#42829;|&#629;|[\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275])/g\n            },\n            {\n                base: \"oe\",\n                letters: /(&#339;|[\\u0153])/g\n            },\n            {\n                base: \"oi\",\n                letters: /(&#419;|[\\u01A3])/g\n            },\n            {\n                base: \"ou\",\n                letters: /(&#547;|[\\u0223])/g\n            },\n            {\n                base: \"oo\",\n                letters: /(&#42831;|[\\uA74F])/g\n            },\n            {\n                base: \"p\",\n                letters: /(&#112;|&#9439;|&#65360;|&#7765;|&#7767;|&#421;|&#7549;|&#42833;|&#42835;|&#42837;|[\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755])/g\n            },\n            {\n                base: \"q\",\n                letters: /(&#113;|&#9440;|&#65361;|&#587;|&#42839;|&#42841;|[\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759])/g\n            },\n            {\n                base: \"r\",\n                letters: /(&#114;|&#9441;|&#65362;|&#341;|&#7769;|&#345;|&#529;|&#531;|&#7771;|&#7773;|&#343;|&#7775;|&#589;|&#637;|&#42843;|&#42919;|&#42883;|[\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783])/g\n            },\n            {\n                base: \"s\",\n                letters: /(&#115;|&#9442;|&#65363;|&#347;|&#7781;|&#349;|&#7777;|&#353;|&#7783;|&#7779;|&#7785;|&#537;|&#351;|&#575;|&#42921;|&#42885;|&#7835;|&#383;|[\\u0073\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u017F])/g\n            },\n            {\n                base: \"ss\",\n                letters: /(&#223;|[\\u00DF])/g\n            },\n            {\n                base: \"t\",\n                letters: /(&#116;|&#9443;|&#65364;|&#7787;|&#7831;|&#357;|&#7789;|&#539;|&#355;|&#7793;|&#7791;|&#359;|&#429;|&#648;|&#11366;|&#42887;|[\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787])/g\n            },\n            {\n                base: \"th\",\n                letters: /(&#254;|[\\u00FE])/g\n            },\n            {\n                base: \"tz\",\n                letters: /(&#42793;|[\\uA729])/g\n            },\n            {\n                base: \"u\",\n                letters: /(&#117;|&#9444;|&#65365;|&#249;|&#250;|&#251;|&#361;|&#7801;|&#363;|&#7803;|&#365;|&#252;|&#476;|&#472;|&#470;|&#474;|&#7911;|&#367;|&#369;|&#468;|&#533;|&#535;|&#432;|&#7915;|&#7913;|&#7919;|&#7917;|&#7921;|&#7909;|&#7795;|&#371;|&#7799;|&#7797;|&#649;|[\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289])/g\n            },\n            {\n                base: \"v\",\n                letters: /(&#118;|&#9445;|&#65366;|&#7805;|&#7807;|&#651;|&#42847;|&#652;|[\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C])/g\n            },\n            {\n                base: \"vy\",\n                letters: /(&#42849;|[\\uA761])/g\n            },\n            {\n                base: \"w\",\n                letters: /(&#119;|&#9446;|&#65367;|&#7809;|&#7811;|&#373;|&#7815;|&#7813;|&#7832;|&#7817;|&#11379;|[\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73])/g\n            },\n            {\n                base: \"x\",\n                letters: /(&#120;|&#9447;|&#65368;|&#7819;|&#7821;|[\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D])/g\n            },\n            {\n                base: \"y\",\n                letters: /(&#121;|&#9448;|&#65369;|&#7923;|&#253;|&#375;|&#7929;|&#563;|&#7823;|&#255;|&#7927;|&#7833;|&#7925;|&#436;|&#591;|&#7935;|[\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF])/g\n            },\n            {\n                base: \"z\",\n                letters: /(&#122;|&#9449;|&#65370;|&#378;|&#7825;|&#380;|&#382;|&#7827;|&#7829;|&#438;|&#549;|&#576;|&#11372;|&#42851;|[\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763])/g\n            }\n        ];\n\n        // Replace any characters in 'letters' with the character(s) in 'base'\n        for (let i=-1;  ++i<characterMap.length;) {\n            string = string.replace(characterMap[i].letters, characterMap[i].base);\n        }\n\n        return string;\n    };\n};\n","export default [\n    {\n        element: 'first_name',\n        rules: {\n            required: 'Please fill in your first name',\n        },\n    },\n    {\n        element: 'password',\n        rules: {\n            required: 'Please fill in a password',\n            matchWith: 'password_check|The passwords do not match',\n        },\n    },\n];\n","import ZeeValinator from '../Core';\nimport validationRules from './validation-rules';\n\nconst zeeValinator = new ZeeValinator();\nconst $form = $('form');\n\n$form.on('submit', event => {\n    const messages = zeeValinator.validate(validationRules);\n\n    // Don't submit the form if there are errors\n    if (messages.length) {\n        event.preventDefault();\n    }\n});\n","import Characters from './Characters';\nimport DefaultChecks from './DefaultChecks';\n\nexport default function()\n{\n    const self = this;\n\n    /**\n     * Dependencies\n     * @type Object\n     */\n    self.characters = new Characters();\n    self.defaultChecks = new DefaultChecks();\n\n    /**\n     * The CSS class to add to an input element that contains an error\n     * @type String\n     */\n    self.inputErrorClass = 'zee-valinator-error';\n\n    /**\n     * The HTML tag to use for the error message element\n     * @type String\n     */\n    self.errorMessageTag = 'span';\n\n    /**\n     * The CSS class of the error message element that will be added to an input element\n     * @type String\n     */\n    self.errorMessageClass = 'zee-valinator-error-message';\n\n    /**\n     * The CSS selector for the error message element\n     * @type String\n     */\n    self.errorMessageSelector = self.errorMessageTag + '.' + self.errorMessageClass;\n\n    /**\n     * The error message element as a jQuery object, for convenience\n     * Clone it before working with it, otherwise the same element will be reused\n     * @type jQuery\n     */\n    self.$errorMessageElement = $('<' + self.errorMessageTag + '/>').addClass(self.errorMessageClass);\n\n    /**\n     * All the validation checks, in name:function pairs\n     * @type Object\n     */\n    self.checks = {};\n\n    /**\n     * Custom error handler, that will overwrite the defaults\n     * One for setting errors, the other for removing them\n     * @type Function\n     */\n    self.customSetError = null;\n    self.customRemoveError = null;\n\n    /**\n     * Whether to clear an error when input changes\n     * @type {Boolean}\n     */\n    self.clearErrorOnChange = false;\n\n    /**\n     * Decide whether to clear an error when input changes\n     * @param  {Boolean} clear\n     * @return {void}\n     */\n    self.setClearErrorOnChange = clear => self.clearErrorOnChange = clear;\n\n    /**\n     * Set a custom CSS class for input fields that contain an error\n     * @param String  cssClass\n     */\n    self.setInputErrorClass = cssClass => self.inputErrorClass = cssClass;\n\n    /**\n     * Set a custom HTML tag to use for adding error message elements\n     * @param String  htmlTag\n     */\n    self.setErrorMessageTag = htmlTag => {\n        self.errorMessageTag = htmlTag;\n\n        // Also update the error message selector and element accordingly\n        self.errorMessageSelector = self.errorMessageTag + '.' + self.errorMessageClass;\n        self.$errorMessageElement = $('<' + self.errorMessageTag + '/>').addClass(self.errorMessageClass);\n    };\n\n    /**\n     * Set a custom CSS class for the error message elements\n     * @param String  cssClass\n     */\n    self.setErrorMessageClass = cssClass => {\n        self.errorMessageClass = cssClass;\n\n        // Also update the error message selector and element accordingly\n        self.errorMessageSelector = self.errorMessageTag + '.' + self.errorMessageClass;\n        self.$errorMessageElement = $('<' + self.errorMessageTag + '/>').addClass(self.errorMessageClass);\n    };\n\n    /**\n     * Set a custom error handler, that will be used instead of setError()\n     * @param Function  addCallback\n     * @param Function  removeCallback\n     */\n    self.setCustomErrorHandlers = (addCallback, removeCallback) => {\n        self.customSetError = addCallback;\n        self.customRemoveError = removeCallback;\n    };\n\n    /**\n     * Set a validation check (new or replace an existing one), that can be used by self.validate\n     * @param String    name      The name of the check\n     * @param Function  callback  The checking function, needs to return a boolean (true = passed, false = failed)\n     *                              This function gets 2 arguments: value and option (option can be null)\n     */\n    self.newCheck = (name, callback) => {\n        // An object with name:function pairs can be given,\n        // which will be merged with the existing\n        if($.type(name) == 'object') {\n            self.checks = $.extend(true, self.checks, name);\n        }\n\n        // Otherwise use name and callback to add it\n        else {\n            self.checks[name] = callback;\n        }\n    };\n\n    /**\n     * Make sure the given value is/becomes a jQuery element\n     * @param  String|jQuery  element\n     * @return jQuery\n     */\n    self.ensureJquery = element => {\n        if($.type(element) == 'string') {\n            element = $('[name=\"' + element + '\"]');\n        }\n\n        return element;\n    };\n\n    /**\n     * Remove any errors that are below an input field\n     * @param jQuery  $element\n     */\n    self.removeError = $element => {\n        // Call the custom one, if it exists\n        if(self.customRemoveError) {\n            self.customRemoveError(self, $element);\n        }\n\n        // Otherwise do the default\n        else {\n            // Remove the error class from the input element\n            $element.removeClass(self.inputErrorClass)\n                // Then remove the error message element\n                .next(self.errorMessageSelector)\n                .remove();\n        }\n    };\n\n    /**\n     * Show an error message below an input field\n     * @param jQuery  $element\n     * @param String  message\n     */\n    self.setError = ($element, message) => {\n        // Call the custom one, if it exists\n        if(self.customSetError) {\n            self.customSetError(self, $element, message);\n        }\n\n        // Otherwise do the default\n        else {\n            // Add an error message element, if it's not there yet\n            if($element.next(self.errorMessageSelector).length < 1) {\n                self.$errorMessageElement.clone().insertAfter($element);\n            }\n\n            // Add the error class to the input element\n            $element.addClass(self.inputErrorClass)\n                // Then set the error message in the error message element\n                .next(self.errorMessageSelector)\n                .html(message);\n\n            if (self.clearErrorOnChange) {\n                // When the value of the element changes, remove the error\n                $element\n                    // Only 1 binding, so remove it first (event namespace is to prevent turning off (all) other event handlers)\n                    .off('change.zeeValinator keyup.zeeValinator paste.zeeValinator')\n                    .on('change.zeeValinator keyup.zeeValinator paste.zeeValinator', function(event) {\n                        self.removeError($element);\n                    });\n            }\n        }\n    };\n\n    /**\n     * Validate given input fields\n     * @param  Array  definitions  Rule definitions as objects (will be converted to array, if an object is given)\n     *                             element: input name or jQuery element\n     *                             rules: validation rules with error message, can have an option, with pipe character\n     *                             Example:\n     *                             {\n     *                                 element: $('input[name=\"password\"]'),\n     *                                 rules: {\n     *                                     required: 'Please fill in a password',\n     *                                     min: '8|Password needs to be least 8 characters long',\n     *                                     matchWith: 'password_check|Passwords need to match'\n     *                                 }\n     *                             }\n     *                             To make a value nullable, provide the rule nullable:true\n     *                             The other validation rules will then only be applied if the value is not empty, example:\n     *                             rules: {\n     *                                 nullable: true,\n     *                                 min: '5|The value needs to be at least 5 characters long'\n     *                             }\n     *                             To make a validation conditional, provide a function instead of a message\n     *                             In this example, the field is only required if a particular select option is chosen\n     *                             rules: {\n     *                                 required: function() {\n     *                                     if($('select[name=\"hobby\"]').val() == 'other')\n     *                                         return 'Please tell us what your hobby is';\n     *                                 }\n     *                             }\n     * @return  Array  Collection of error elements as objects: {$element, message}\n     */\n    self.validate = definitions => {\n        // Make sure the definitions are an array\n        if($.type(definitions) != 'array') {\n            definitions = [definitions];\n        }\n\n        // Keep track of the elements that have errors\n        // Will contain objects: {$element, message}\n        var errorElements = [];\n\n        // Loop over the validation definitions\n        $.each(definitions, function(definitionIndex, definition) {\n            // The same definitions can apply to multiple elements, so make sure the element(s) are an array\n            if($.type(definition.element) != 'array') {\n                definition.element = [definition.element];\n            }\n\n            // Loop over the elements and check for errors\n            $.each(definition.element, function(elementIndex, element) {\n                // Make sure that the element is a jQuery element\n                var $element = self.ensureJquery(element);\n\n                // Continue if the element exists\n                if($element.length > 0) {\n                    // Only validate enabled elements\n                    if($element.prop('disabled') === false) {\n                        // Clear any current error message\n                        self.removeError($element);\n\n                        // Get the (trimmed) value, and update it inside the input field\n                        var value = $.trim($element.val());\n                        $element.val(value);\n\n                        // See if the element is nullable\n                        var nullable = definition.rules.nullable;\n                        if($.type(nullable) == 'function') {\n                            nullable = nullable($element);\n                        }\n\n                        // Only validate if the value is not nullable,\n                        // or if the value is nullable, and the value is not empty\n                        if( ! nullable  ||  (nullable  &&  value != '')) {\n                            // Loop over the validation rules\n                            $.each(definition.rules, function(ruleName, message) {\n                                // Don't validate the 'nullable' rule\n                                if(ruleName != 'nullable') {\n                                    var option = null;\n\n                                    // If the message is a function, it means it's conditional\n                                    // First execute the function, to see if validation is needed\n                                    if($.type(message) == 'function') {\n                                        message = message($element);\n                                    }\n\n                                    // Only validate, if there is a valid message (which includes a possible option)\n                                    if($.type(message) == 'string') {\n                                        // Split the message to option + message by pipe character\n                                        // If it has a pipe character, the part before it is the option\n                                        var messageParts = message.split('|', 2);\n                                        if(messageParts.length == 2) {\n                                            option = messageParts[0];\n                                            message = messageParts[1];\n                                        }\n\n                                        // Check the value for errors (if the check exists)\n                                        if(self.checks[ruleName]  &&  ! self.checks[ruleName](value, option)) {\n                                            // Set an error on the element, and keep a reference\n                                            self.setError($element, message);\n                                            errorElements.push({\n                                                $element: $element,\n                                                message: message\n                                            });\n\n                                            // In case of error, don't do another validation on the same element\n                                            return false;\n                                        }\n                                    }\n                                }\n                            });\n                        }\n                    }\n                }\n            });\n        });\n\n        return errorElements;\n    };\n\n\n\n    /**\n     * Set some validation checks, to be used by self.validate\n     */\n    (self.setChecks = () => {\n        self.newCheck(self.defaultChecks.get());\n    })();\n};\n","export default function()\n{\n    const self = this;\n\n    /**\n     * Get the default checks\n     * @return  Object\n     */\n    self.get = () => {\n        return {\n            alphanumeric: (value, option) => {\n                // Value needs to be alphanumeric\n                var result = value.match(/^[a-z\\d]+$/gi);\n                return (result !== null);\n            },\n            email: (value, option) => {\n                // Value needs to be a valid email address\n                var result = value.match(/^.+?@.+?\\..+$/g);\n                return (result !== null);\n            },\n            hexColor: (value, option) => {\n                // Value needs to be a hexadecimal color, #xxx or #xxxxxx\n                var result = value.match(/^#([a-f\\d]{3}){1,2}$/gi);\n                return (result !== null);\n            },\n            length: (value, option) => {\n                // Value needs to have a fixed length\n                return (value.length == parseInt(option, 10));\n            },\n            match: (value, option) => {\n                // Value needs to match the option\n                return (value == option);\n            },\n            matchWith: (value, option) => {\n                // Value needs to match the value of another element\n                return (value == $('[name=\"' + option + '\"]').val());\n            },\n            maxLength: (value, option) => {\n                // Value needs to have a maximum length\n                return (value.length <= parseInt(option, 10));\n            },\n            maxNumber: (value, option) => {\n                // Value needs to be a number, and lower than or equal to the option\n                return ( ! isNaN(value - parseFloat(value))  &&  value <= parseFloat(option));\n            },\n            minLength: (value, option) => {\n                // Value needs to have a minimum length\n                return (value.length >= parseInt(option, 10));\n            },\n            minNumber: (value, option) => {\n                // Value needs to be a number, and higher than or equal to the option\n                return ( ! isNaN(value - parseFloat(value))  &&  value >= parseFloat(option));\n            },\n            personName: (value, option) => {\n                // Value needs to be a valid name\n                // Remove accents, before validating the alphabetical characters\n                var nameNoAccents = self.characters.removeAccents(value);\n                var result = nameNoAccents.match(/^[a-z0-9 \\/,.-]+$/gi);\n                return (result !== null);\n            },\n            numeric: (value, option) => {\n                // Value needs to be a number\n                // From: https://github.com/angular/angular/blob/4.3.x/packages/common/src/pipes/number_pipe.ts#L172\n                return ( ! isNaN(value - parseFloat(value)));\n            },\n            phone: (value, option) => {\n                // Value needs to be a valid phone number\n                var result = value.match(/^[\\d\\(\\) \\+-]+$/g);\n                return (result !== null);\n            },\n            required: (value, option) => {\n                // Value can't be empty\n                return (value != '');\n            },\n        };\n    };\n};\n"],"sourceRoot":""}